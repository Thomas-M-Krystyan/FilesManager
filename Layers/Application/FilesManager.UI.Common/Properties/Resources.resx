<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Content_ClearButton" xml:space="preserve">
    <value>Clear</value>
    <comment>XAML</comment>
  </data>
  <data name="Content_ProcessButton" xml:space="preserve">
    <value>Process</value>
    <comment>XAML</comment>
  </data>
  <data name="Content_ResetButton" xml:space="preserve">
    <value>Reset</value>
    <comment>XAML</comment>
  </data>
  <data name="ERROR_Internal_PropertyOrMessageAreEmpty" xml:space="preserve">
    <value>The property name or error message shouldn't be empty!</value>
    <comment>Exception message</comment>
  </data>
  <data name="ERROR_Internal_WrongCommandSubscribed" xml:space="preserve">
    <value>The method is used with a wrong event:</value>
    <comment>Exception message</comment>
  </data>
  <data name="ERROR_Validation_Field_ContainsIllegalCharacter" xml:space="preserve">
    <value>The given value contains illegal characters</value>
    <comment>UI message</comment>
  </data>
  <data name="ERROR_Validation_Field_ContainsNotDigits" xml:space="preserve">
    <value>The given value contains not a number (NaN)</value>
    <comment>UI message</comment>
  </data>
  <data name="ERROR_Validation_Field_ExceedsMaxLimit" xml:space="preserve">
    <value>The given number is larger than allowed maximum limit of</value>
    <comment>UI message</comment>
  </data>
  <data name="ERROR_Validation_Field_ValueWillExceedUshortMax" xml:space="preserve">
    <value>Some numbers would eventually exceed the max value for 'Start number' (65535) if the renaming continue.</value>
    <comment>UI message</comment>
  </data>
  <data name="ERROR_Validation_FileName_HasNoPreceedingNumber" xml:space="preserve">
    <value>The file name does not contain preceeding numeric part:</value>
    <comment>UI message</comment>
  </data>
  <data name="ERROR_Validation_Files_PathNotRecognized_Header" xml:space="preserve">
    <value>File loading error</value>
    <comment>UI message</comment>
  </data>
  <data name="ERROR_Validation_Files_PathNotRecognized_Text" xml:space="preserve">
    <value>Unrecognized type of file:</value>
    <comment>UI message</comment>
  </data>
  <data name="ERROR_Validation_File_NotRenamed" xml:space="preserve">
    <value>The given file couldn't be renamed:</value>
    <comment>UI message</comment>
  </data>
  <data name="Header_General" xml:space="preserve">
    <value>OPTIONS</value>
    <comment>XAML</comment>
  </data>
  <data name="Header_Method_IncrementNumber" xml:space="preserve">
    <value>"Replace name" ([old name] → prefix? + number + postfix?)</value>
    <comment>XAML</comment>
  </data>
  <data name="Header_Method_LeadingZeros" xml:space="preserve">
    <value>"Leading zeros"</value>
    <comment>XAML</comment>
  </data>
  <data name="Header_Method_PrependAppend" xml:space="preserve">
    <value>"Update name" (prepend? + [unchanged name] + append?)</value>
    <comment>XAML</comment>
  </data>
  <data name="Label_Append" xml:space="preserve">
    <value>Append:</value>
    <comment>XAML</comment>
  </data>
  <data name="Label_FilesCounter" xml:space="preserve">
    <value>Counter:</value>
    <comment>XAML</comment>
  </data>
  <data name="Label_Postfix" xml:space="preserve">
    <value>Postfix:</value>
    <comment>XAML</comment>
  </data>
  <data name="Label_Prefix" xml:space="preserve">
    <value>Prefix:</value>
    <comment>XAML</comment>
  </data>
  <data name="Label_Prepend" xml:space="preserve">
    <value>Prepend:</value>
    <comment>XAML</comment>
  </data>
  <data name="Label_Set" xml:space="preserve">
    <value>Set:</value>
    <comment>XAML</comment>
  </data>
  <data name="Label_StartNumber" xml:space="preserve">
    <value>Start number:</value>
    <comment>XAML</comment>
  </data>
  <data name="RESULT_Operation_Failure" xml:space="preserve">
    <value>Operation failed</value>
    <comment>UI message</comment>
  </data>
  <data name="RESULT_Operation_Success_Header" xml:space="preserve">
    <value>Operation successful</value>
    <comment>UI message</comment>
  </data>
  <data name="RESULT_Operation_Success_Text" xml:space="preserve">
    <value>All files were renamed!</value>
    <comment>UI message</comment>
  </data>
  <data name="Tooltip_Append" xml:space="preserve">
    <value>INFO: Optional text to be added at the end of the file name</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_ClearButton" xml:space="preserve">
    <value>INFO: Clears only the values from the methods (keeps the files)</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_ClearZeros" xml:space="preserve">
    <value>Clear all possible zeros absolutely (ON) or relatively (OFF).

INPUT:
- 00000.gif
- 00001.docx
- 0082c.jpg

PARAMETERS:
- Set: 0

RESULT (Modes):

Absolute (ON):      Relative (OFF):
- 0.gif                     - 000.gif
- 1.docx                 - 001.docx
- 82c.jpg                - 82c.jpg


EXPLANATION:

Mode ON:    Clears zeros absolutely, as much as possible. Do not clear the last 0 to avoid ".gif" case

Mode OFF:   Clears zeros relatively, indenting them to the length of the longest non-zeroes file name
The file "82c.jpg" has the longest non-zeroes file name (3 characters) so, shorter files will be indented
to it. For example, file "1.jpg" is shorter by 2 characters from the longest non-zeroes file name. During
zeros trimming (set: 0) the gap between files lenghts will be filled with 2 zeros.</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_FilesCounter" xml:space="preserve">
    <value>The number of currently loaded files</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_FilesList" xml:space="preserve">
    <value>INFO: Drag and drop files here</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_General" xml:space="preserve">
    <value>INFO: The operations on files that can be performed</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_Method_IncrementNumber" xml:space="preserve">
    <value>EXAMPLE

INPUT:
- picture20.png
- file42.jpeg

PARAMETERS:
- Prefix: "test #"
- Start number: 0
- Postfix: "_file"

RESULT:
- test #0_file.png
- test #1_file.jpeg


EXPLANATION: The original file names are completely
replaced by at least one of the provided values. It is po-
ssible to put text before counting numbers, or leave it
blank, to keep only numbers as the new file names.

PS: You can also use this method to rename your
files in the following way: "image (" + "1" + ")"
resulting with this output: "image (1).jpg" which
is a similar behavior to Microsoft Windows renaming
strategy (adding numbers to avoid conflicting names).</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_Method_LeadingZeros" xml:space="preserve">
    <value>EXAMPLE

INPUT:
- 1.jpg
- 15.jpg

PARAMETERS:
- Set: 2

RESULT:
- 0001.jpg
- 0015.jpg


EXPLANATION: As the first step "n-leading" zeros
were added to the longest file name. Then, as the
second step, names shorter or equal to the longest
possible name were aligned by adding respective
amount of zeroes. This behavior is useful for older
Windows systems sorting behaviors, where files
were ordered lexicographically as following:

Lexicographically:        Mathematically:

0.txt                                00.txt
1.txt                                01.txt
10.txt                              02.txt
2.txt                                10.txt</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_Method_PrependAppend" xml:space="preserve">
    <value>EXAMPLE

INPUT:
- Archive.zip

PARAMETERS:
- Prepend: "My_["
- Append: "]_2022"

RESULT:
- My_[Archive]_2022.zip</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_Postfix" xml:space="preserve">
    <value>INFO: Optional text to be added after the number</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_Prefix" xml:space="preserve">
    <value>INFO: Optional text to be added before the number</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_Prepend" xml:space="preserve">
    <value>INFO: Optional text to be added at the beginning of the file name</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_ProcessButton" xml:space="preserve">
    <value>INFO: Starts processing the given files based on a selected method</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_RadioButton" xml:space="preserve">
    <value>INFO: Select to activate this method</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_ResetButton" xml:space="preserve">
    <value>INFO: Resets loaded files and all the values from the methods</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_Set" xml:space="preserve">
    <value>INFO: Set the amount of leading zeros before the file name</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_StartNumber" xml:space="preserve">
    <value>INFO: Rename given files using an incremented start number</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_Tip_Content_NonEmptyField" xml:space="preserve">
    <value>TIP: Empty or only whitespaces content will be ignored

Invalid characters:  \ / : * ? " &lt; &gt; |</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_Tip_Content_OnlyPositives" xml:space="preserve">
    <value>TIP: Only positive numbers from the range [0 - 65 535]</value>
    <comment>XAML</comment>
  </data>
  <data name="Tooltip_Tip_Content_OnlyVerySmallPositives" xml:space="preserve">
    <value>TIP: Only positive numbers from the range [0 - 7]</value>
    <comment>XAML</comment>
  </data>
  <data name="WindowTitle" xml:space="preserve">
    <value>File Manager (v0.3.9-alpha)</value>
    <comment>Application</comment>
  </data>
</root>